from PyQt5 import QtCore
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import sys

class ActuatorsAppAdmin(QWidget):
    def __init__(self, ventana_login, embed=False):
        super().__init__(ventana_login)
        self.ventana_login = ventana_login
        
        self.init_ui()

    def init_ui(self):
        self.setStyleSheet("""
            QLabel#Title {
                font-size: 28px;
                font-weight: bold;
                color: white;
                margin-left: 15px;
            }
            QLabel#Subtitle {
                font-size: 16px;
                font-weight: bold;
                color: white;
            }
            QPushButton {
                padding: 8px 16px;
                border-radius: 20px;
                background-color: #7FD1B9;
                color: black;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #6fc9a9;
            }
        """)

        main_layout = QVBoxLayout(self)

        # --- Frame principal ---
        actuators_frame = QFrame()
        actuators_frame.setStyleSheet("background-color: #28243C; border-radius: 15px;")
        actuators_layout = QVBoxLayout(actuators_frame)
        actuators_layout.setContentsMargins(20, 40, 20, 20)

        # --- Título ---
        title_actuadores = QLabel("Control de Actuadores")
        title_actuadores.setObjectName("Title")

        # --- Botón añadir actuador con borde degradado ---
        self.add_actuator_button = QPushButton(" Agregar actuador")
        self.add_actuator_button.setIcon(QIcon("assets/icons/btn-add-white.svg"))
        self.add_actuator_button.setIconSize(QSize(24, 24))
        self.add_actuator_button.setStyleSheet("""
            QPushButton {
                background-color: #1F2232;
                color: white;
                font-weight: bold;
                font-size: 16px;
                border: none;
                padding: 10px 20px;
                border-radius: 30px;
            }
            QPushButton:hover {
                background-color: #1F2F32;
            }
        """)
        self.add_actuator_button.clicked.connect(self.open_agregar_actuador)

        add_actuator_outer_frame = QFrame()
        add_actuator_outer_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #60D4B8, stop:1 #1E2233);
                border-radius: 30px;
                padding: 4px;
            }
        """)

        add_actuator_inner_layout = QVBoxLayout(add_actuator_outer_frame)
        add_actuator_inner_layout.setContentsMargins(0, 0, 0, 0)
        add_actuator_inner_layout.addWidget(self.add_actuator_button)

        # Ajusta el tamaño automáticamente
        add_actuator_outer_frame.setSizePolicy(self.add_actuator_button.sizePolicy())

        # --- Layout horizontal para título y botón ---
        top_layout = QHBoxLayout()
        top_layout.addWidget(title_actuadores, alignment=Qt.AlignVCenter)
        top_layout.addStretch()
        top_layout.addWidget(add_actuator_outer_frame)
        
        # --- Contenedor para los actuadores ---
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
            }
            QScrollBar:vertical {
                width: 12px;
                background: #252535;
            }
            QScrollBar::handle:vertical {
                background: #4a4a5a;
                min-height: 20px;
                border-radius: 6px;
            }
        """)
        scroll_content = QWidget()
        scroll_content.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Maximum)

        # --- Agregar widgets al layout ---
        actuators_layout.addLayout(top_layout)

        # Espacio entre el título/botón y el listado de actuadores
        space_between = QWidget()
        space_between.setFixedHeight(30)
        actuators_layout.addWidget(space_between)

        actuators_layout.addWidget(scroll_area)

        self.actuators_list_layout = QVBoxLayout(scroll_content)
        scroll_content.setContentsMargins(0, 0, 0, 0)
        scroll_area.setContentsMargins(0, 0, 0, 0)
        self.actuators_list_layout.setContentsMargins(10, 10, 10, 10)
        self.actuators_list_layout.setSpacing(30)

        scroll_area.setWidget(scroll_content)

        main_layout.addWidget(actuators_frame)

        # --- Llenar actuadores de ejemplo ---
        self.populate_actuators()

    def open_agregar_actuador(self):
        self.agregar_actuador_window = modal_agregar_actuador()
        self.agregar_actuador_window.show()

    def populate_actuators(self):
        actuadores = [
            {"nombre": "Bomba Sumergible", "estado": True},
            {"nombre": "Bomba Peristáltica", "estado": False},
            {"nombre": "Válvula Solenoide", "estado": True},
            {"nombre": "Motor DC", "estado": False},
            {"nombre": "Calentador", "estado": True}
        ]

        for actuador in actuadores:
            # --- Frame exterior ---
            outer_frame = QFrame()
            outer_frame.setFixedHeight(75)
            outer_frame.setStyleSheet("""
                QFrame {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                        stop:0 #60D4B8, stop:1 #1E2233);
                    border-radius: 35px;
                    padding: 2px;
                }
            """)

            # --- Frame interior ---
            actuator_frame = QFrame()
            actuator_frame.setStyleSheet("""
                background-color: #1f2232;
                border-radius: 35px;
            """)
            actuator_frame.setFixedHeight(70)
            actuator_layout = QHBoxLayout(actuator_frame)
            actuator_layout.setContentsMargins(20, 10, 20, 10)

            # Indicador de estado
            status_indicator = QLabel()
            status_indicator.setFixedSize(18, 18)
            status_color = "#4CAF50" if actuador["estado"] else "#f44336"
            status_indicator.setStyleSheet(f"""
                background-color: {status_color};
                border-radius: 9px;
                border: 2px solid #ffffff;
            """)
            actuator_layout.addWidget(status_indicator)

            # Nombre del actuador
            name_label = QLabel(actuador["nombre"])
            name_label.setStyleSheet("color: white; font-weight: bold; font-size: 16px;")
            actuator_layout.addWidget(name_label)

            actuator_layout.addStretch()

            # Botones
            edit_button = QPushButton("Editar")
            edit_button.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    font-weight: bold;
                    border-radius: 14px;
                    padding: 6px 14px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
            """)

            delete_button = QPushButton("Eliminar")
            delete_button.setStyleSheet("""
                QPushButton {
                    background-color: #FF6B6B;
                    color: white;
                    font-weight: bold;
                    border-radius: 14px;
                    padding: 6px 14px;
                }
                QPushButton:hover {
                    background-color: #e85c5c;
                }
            """)

            buttons_layout = QHBoxLayout()
            buttons_layout.setSpacing(10)
            buttons_layout.addWidget(edit_button)
            buttons_layout.addWidget(delete_button)

            actuator_layout.addLayout(buttons_layout)

            # Asignar el interior al exterior
            outer_layout = QVBoxLayout(outer_frame)
            outer_layout.setContentsMargins(0, 0, 0, 0)
            outer_layout.addWidget(actuator_frame)

            # Agregar al layout principal
            self.actuators_list_layout.addWidget(outer_frame)

        # self.add_actuator_button.mousePressEvent = self.open_agregar_actuador
        # self.add_actuator_button.setAttribute(QtCore.Qt.WA_Hover, True)
        # self.add_actuator_button.setMouseTracking(True)

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.offset = event.pos()
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.offset is not None and event.buttons() == QtCore.Qt.LeftButton:
            self.move(self.pos() + event.pos() - self.offset)
        else:
            super().mouseMoveEvent(event)

    # def open_agregar_actuador(self, event):
    #     if event.button() == QtCore.Qt.LeftButton:
    #         self.actuador_window = modal_agregar_actuador()
    #         self.actuador_window.show()

    
class modal_agregar_actuador(QWidget):
    def __init__(self):
        super(modal_agregar_actuador, self).__init__()
        self.setWindowTitle("Editar trabajador")
        self.resize(450, 700)
        self.setWindowModality(Qt.ApplicationModal)
        self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint)

        self.setStyleSheet("""
            QWidget {
                background-color: #1E1B2E;
                color: white;
                border-radius: 30px;
            }
        """)
        
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(30, 30, 30, 30)
        main_layout.setSpacing(25)

        # --- Título ---
        title = QLabel("AGREGAR ACTUADOR")
        title.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #7FD1B9;
                qproperty-alignment: AlignCenter;
                margin-bottom: 20px;
            }
        """)
        main_layout.addWidget(title)

        # --- Formulario ---
        form_layout = QFormLayout()
        form_layout.setVerticalSpacing(20)
        form_layout.setHorizontalSpacing(15)

        # Campos del formulario
        campos = [
            ("Nombre del actuador", self.create_gradient_input("Nombre del actuador")),
            ("Tipo de actuador", self.create_gradient_input("Tipo de actuador")),
            ("Bus", self.create_gradient_input("Bus")),
            ("Address", self.create_gradient_input("Address")),
            ("Modo de activación", self.create_gradient_input("Modo de activacion")),
            ("Estado inicial", self.create_gradient_input("Estado inicial"))
        ]

        for label_text, input_widget in campos:
            label = QLabel(label_text)
            label.setStyleSheet("font-size: 14px; font-weight: bold;")
            form_layout.addRow(label, input_widget)

        

        main_layout.addLayout(form_layout)
        main_layout.addStretch()

        # --- Botones ---
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(20)

        btn_aceptar = QPushButton("Aceptar")
        btn_cancelar = QPushButton("Cancelar")

        for btn in [btn_aceptar, btn_cancelar]:
            btn.setFixedHeight(40)
            btn.setCursor(Qt.PointingHandCursor)

        btn_aceptar.setStyleSheet("""
            QPushButton {
                background-color: #7FD1B9;
                color: black;
                font-weight: bold;
                border-radius: 20px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #6bc0a8;
            }
        """)

        btn_cancelar.setStyleSheet("""
            QPushButton {
                background-color: #FF6B6B;
                color: white;
                font-weight: bold;
                border-radius: 20px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #e05c5c;
            }
        """)

        btn_layout.addStretch()
        btn_layout.addWidget(btn_cancelar)
        btn_layout.addWidget(btn_aceptar)

        main_layout.addLayout(btn_layout)

        # Conexiones
        btn_aceptar.clicked.connect(self.aceptar)
        btn_cancelar.clicked.connect(self.close)

    def create_gradient_input(self, placeholder_text=""):
        """Crea un input con el marco degradado como los actuadores"""
        outer_frame = QFrame()
        outer_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #60D4B8, stop:1 #1E2233);
                border-radius: 20px;
                padding: 2px;
            }
        """)
        outer_frame.setFixedHeight(45)

        inner_frame = QFrame()
        inner_frame.setStyleSheet("""
            QFrame {
                background-color: #1f2232;
                border-radius: 18px;
            }
        """)

        layout = QHBoxLayout(inner_frame)
        layout.setContentsMargins(10, 0, 10, 0)

        input_field = QLineEdit()
        input_field.setPlaceholderText(placeholder_text)
        input_field.setStyleSheet("""
            QLineEdit {
                background: transparent;
                border: none;
                color: white;
                font-size: 14px;
                padding: 5px;
            }
            QLineEdit::placeholder {
                color: #f1f1f1;  /* Color del texto */
                font-style: italic;  /* Cursiva */
            }
        """)
        layout.addWidget(input_field)

        outer_layout = QVBoxLayout(outer_frame)
        outer_layout.setContentsMargins(0, 0, 0, 0)
        outer_layout.addWidget(inner_frame)

        # Guardamos referencia al input
        outer_frame.input_field = input_field

        return outer_frame

    def aceptar(self):
        # Aquí procesaríamos los datos
        print("Formulario aceptado")
        self.accept()